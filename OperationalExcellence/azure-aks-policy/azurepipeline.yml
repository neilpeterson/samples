# Notes: can I use the validation API with linke template .via uri function?
# List of ARM TTK Test: https://github.com/Azure/arm-ttk/tree/master/arm-ttk/testcases/deploymentTemplate

trigger:
  branches:
    include:
      - arm-template-validation
  paths:
    include:
      - OperationalExcellence/azure-aks-policy/*

variables:
- name: serviceConnection
  value: azure-service-connection-mg
- name: resource-group
  value: aks-policy-$(Build.BuildId)
- name: location
  value: eastus
- name: spec
  value: aks-policy
- name: spec-version
  value: $(Build.BuildId)
- name: ttk-skip-test
  value: 'Location-Should-Not-Be-Hardcoded,IDs-Should-Be-Derived-From-ResourceIDs'

pool:
  vmImage: 'ubuntu-latest'

stages:

# Run ARM TTK and publish test results
- stage: staticanalysis

  jobs:
  - job: armttk
    pool:
      vmImage: 'windows-latest'
    continueOnError: false
    timeoutInMinutes: 20

    steps:
    
    - task: RunARMTTKTests@1
      inputs:
        templatelocation: '$(System.DefaultWorkingDirectory)/OperationalExcellence/azure-aks-policy/*'
        resultLocation: '$(System.DefaultWorkingDirectory)'
        # skipTests: $(ttk-skip-test)
        
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'NUnit'
        testResultsFiles: '$(System.DefaultWorkingDirectory)\*-armttk.xml'
      condition: always()

# Create template spec and deploy
# This runs regardless of TTK results
- stage: deployment
  dependsOn: []

  jobs:
  - job: arm
    pool: Hosted Ubuntu 1604
    continueOnError: false

    steps:    
    
    - task: AzureCLI@2
      displayName: Create resource group
      inputs:
        azureSubscription: $(serviceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: 'az group create --name $(resource-group) --location $(location)'
        
    - task: AzureCLI@2
      displayName: Create template spec
      inputs:
        azureSubscription: $(serviceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: 'az ts create --name $(spec) --version $(spec-version) --resource-group $(resource-group) --location $(location) --template-file $(System.DefaultWorkingDirectory)/OperationalExcellence/azure-aks-policy/azuredeploy-spec.json' 
        
    - task: AzureCLI@2
      displayName: Deploy template spec
      inputs:
        azureSubscription: $(serviceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
         id=$(az ts show --name $(spec) --version $(spec-version) --resource-group $(resource-group) --query id -o tsv)
         az deployment group create --resource-group $(resource-group) --template-spec $id
        
# Perform validation on the deployment
- stage: integration
  dependsOn: deploy

  jobs:
  - job: integration
    pool: Hosted Ubuntu 1604
    continueOnError: false
    timeoutInMinutes: 20

    steps:

    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          # Write your commands here
          echo 'Hello world'

# Clean up deployment
- stage: cleanup
  dependsOn: integration

  jobs:
  - job: integration
    pool: Hosted Ubuntu 1604
    continueOnError: false
    timeoutInMinutes: 20

    steps:

    - task: AzureCLI@2
      displayName: Delete resource group
      inputs:
        azureSubscription: $(serviceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: 'az group delete --resource-group $(resource-group) --yes --no-wait' 