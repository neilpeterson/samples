# Notes: can I use the validation API with linke template .via uri function?

trigger:
  branches:
    include:
      - arm-template-validation
  paths:
    include:
      - OperationalExcellence/azure-aks-policy/*

variables:
- name: serviceConnection
  value: azure-service-connection-mg
- name: resource-group
  value: aks-policy-$(Build.BuildId)
- name: location
  value: eastus
- name: spec
  value: aks-policy
- name: spec-version
  value: $(Build.BuildId)

pool:
  vmImage: 'ubuntu-latest'

stages:

# Run ARM TTK and publish test results
- stage: staticanalysis

  jobs:
  - job: armttk
    pool: Hosted Ubuntu 1604
    continueOnError: false
    timeoutInMinutes: 20

    steps:
    
    - task: RunARMTTKTests@1
      inputs:
        templatelocation: '$(System.DefaultWorkingDirectory)/OperationalExcellence/azure-aks-policy/*'
        resultLocation: '$(System.DefaultWorkingDirectory)'
        skipTests: 'Location-Should-Not-Be-Hardcoded'


    # - task: AzureCLI@2
    #   displayName: 'Download ARM Template Tester Toolkit'
    #   inputs:
    #     azureSubscription: $(serviceConnection)
    #     scriptType: 'pscore'
    #     scriptLocation: 'inlineScript'
    #     workingDirectory: $(System.DefaultWorkingDirectory)
    #     inlineScript: 'curl https://azurequickstartsservice.blob.core.windows.net/ttk/latest/arm-template-toolkit.zip --output arm-template-toolkit.zip --silent'

    # - task: ExtractFiles@1
    #   displayName: 'Extract ARM Template Toolkit'
    #   inputs:
    #     archiveFilePatterns: '$(System.DefaultWorkingDirectory)/arm-template-toolkit.zip'
    #     destinationFolder: '$(System.DefaultWorkingDirectory)/arm-template-toolkit'
    #     cleanDestinationFolder: true

    # - task: PowerShell@2
    #   displayName: 'Run ARM Template Toolkit'
    #   inputs:
    #     targetType: 'inline'
    #     script: |
    #       Import-Module ./arm-ttk.psd1
    #       Test-AzTemplate -TemplatePath '$(System.DefaultWorkingDirectory)/OperationalExcellence/azure-aks-policy/' -Test deploymentTemplate
    #     pwsh: true
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/arm-template-toolkit/arm-ttk'

# Create template spec and deploy
- stage: deploy
  dependsOn: staticanalysis

  jobs:
  - job: arm
    pool: Hosted Ubuntu 1604
    continueOnError: false

    steps:    
    
    - task: AzureCLI@2
      displayName: Create resource group
      inputs:
        azureSubscription: $(serviceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: 'az group create --name $(resource-group) --location $(location)'
        
    - task: AzureCLI@2
      displayName: Create template spec
      inputs:
        azureSubscription: $(serviceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: 'az ts create --name $(spec) --version $(spec-version) --resource-group $(resource-group) --location $(location) --template-file $(System.DefaultWorkingDirectory)/OperationalExcellence/azure-aks-policy/azuredeploy-spec.json' 
        
    - task: AzureCLI@2
      displayName: Deploy template spec
      inputs:
        azureSubscription: $(serviceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
         id=$(az ts show --name $(spec) --version $(spec-version) --resource-group $(resource-group) --query id -o tsv)
         az deployment group create --resource-group $(resource-group) --template-spec $id
        
# Perform any validation on the deployment
- stage: integration
  dependsOn: deploy

  jobs:
  - job: integration
    pool: Hosted Ubuntu 1604
    continueOnError: false
    timeoutInMinutes: 20

    steps:

    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          # Write your commands here
          echo 'Hello world'

# Clean up deployment
- stage: cleanup
  dependsOn: integration

  jobs:
  - job: integration
    pool: Hosted Ubuntu 1604
    continueOnError: false
    timeoutInMinutes: 20

    steps:

    - task: AzureCLI@2
      displayName: Delete resource group
      inputs:
        azureSubscription: $(serviceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: 'az group delete --resource-group $(resource-group) --yes --no-wait' 